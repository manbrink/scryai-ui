// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Deck {
  id               String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String
  name             String
  description      String
  format           String
  groupBy          String
  sortBy           String
  featuredCard     String
  featuredCardScryfallArtCropUrl String?
  deckCards        DeckCard[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Card {
  id                String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  setName           String
  manaCost          String
  cmc               Int
  typeLine          String?
  flavorText        String?
  colors            String[]
  producedMana      String[]
  scryfallId        String        @unique
  scryfallBorderCropUrl String?
  scryfallArtCropUrl String?
  deckCards         DeckCard[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model DeckCard {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  deckId   String @db.Uuid
  cardId   String @db.Uuid
  quantity Int
  isMain Boolean @default(false)
  isSide Boolean @default(false)
  deck     Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  card     Card   @relation(fields: [cardId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}